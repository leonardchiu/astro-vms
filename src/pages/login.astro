---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Login">
    <main class="min-h-screen bg-white">
		<div class="flex min-h-full flex-col justify-center px-6 py-12 lg:px-8">
			<div class="sm:mx-auto sm:w-full sm:max-w-sm">
				<img class="mx-auto h-10 w-auto" src="https://tailwindui.com/plus/img/logos/mark.svg?color=indigo&shade=600" alt="Your Company">
				<h2 class="mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900">Sign in to your account</h2>
			</div>
		
			<div class="mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
				<form id="loginForm" class="space-y-6">
					<div>
						<label for="username" class="block text-sm font-medium leading-6 text-gray-900">Username</label>
						<div class="mt-2">
							<input id="username" name="username" type="text" autocomplete="username" required class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
						</div>
					</div>
		
					<div>
						<div class="flex items-center justify-between">
							<label for="password" class="block text-sm font-medium leading-6 text-gray-900">Password</label>
							<div class="text-sm">
								<a href="#" class="font-semibold text-indigo-600 hover:text-indigo-500">Forgot password?</a>
							</div>
						</div>
						<div class="mt-2">
							<input id="password" name="password" type="password" autocomplete="current-password" required class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
						</div>
					</div>
		
					<div>
						<button type="submit" id="submitButton" class="flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Sign in</button>
					</div>
				</form>
		
				<p class="mt-10 text-center text-sm text-gray-500">
					Not a member?
					<a href="#" class="font-semibold leading-6 text-indigo-600 hover:text-indigo-500">Start a 14 day free trial</a>
				</p>
			</div>
		</div>
	</main>

	<!-- Success Modal -->
	<div id="successModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden items-center justify-center transition-opacity duration-300 ease-out">
		<div class="relative p-5 border w-96 shadow-lg rounded-md bg-white transition-all duration-300 ease-out transform scale-95 opacity-0">
			<div class="mt-3 text-center">
				<div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
					<svg class="h-6 w-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
					</svg>
				</div>
				<h3 class="text-lg leading-6 font-medium text-gray-900 mt-2">Login Successful!</h3>
				<div class="mt-2 px-7 py-3">
					<p class="text-sm text-gray-500">You have successfully logged in.</p>
				</div>
				<div class="items-center px-4 py-3">
					<button id="closeSuccessModal" class="px-4 py-2 bg-green-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-300">
						OK
					</button>
				</div>
			</div>
		</div>
	</div>

	<!-- Error Modal -->
	<div id="errorModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden items-center justify-center transition-opacity duration-300 ease-out">
		<div class="relative p-5 border w-96 shadow-lg rounded-md bg-white transition-all duration-300 ease-out transform scale-95 opacity-0">
			<div class="mt-3 text-center">
				<div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
					<svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</div>
				<h3 class="text-lg leading-6 font-medium text-gray-900 mt-2">Login Failed</h3>
				<div class="mt-2 px-7 py-3">
					<p class="text-sm text-gray-500">Authentication failed. Please check your credentials and try again.</p>
				</div>
				<div class="items-center px-4 py-3">
					<button id="closeErrorModal" class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-300">
						Close
					</button>
				</div>
			</div>
		</div>
	</div> 
</Layout>

<script>
	console.log('Script is running');

	document.addEventListener('DOMContentLoaded', () => {
		console.log('DOMContentLoaded event fired');

		const form = document.getElementById('loginForm');
		const submitButton = document.getElementById('submitButton');
		const successModal = document.getElementById('successModal');
		const errorModal = document.getElementById('errorModal');
		const closeSuccessModalButton = document.getElementById('closeSuccessModal');
		const closeErrorModalButton = document.getElementById('closeErrorModal');

		if (form) {
			console.log('Form found');
			form.addEventListener('submit', handleSubmit);
		} else {
			console.error('Form not found');
			showErrorModal();
		}

		if (submitButton) {
			console.log('Submit button found');
			submitButton.addEventListener('click', handleSubmit);
		} else {
			console.error('Submit button not found');
		}

		if (closeSuccessModalButton) {
			closeSuccessModalButton.addEventListener('click', () => hideModal('successModal'));
		}

		if (closeErrorModalButton) {
			closeErrorModalButton.addEventListener('click', () => hideModal('errorModal'));
		}
	});

	function showSuccessModal() {
		const successModal = document.getElementById('successModal');
		const modalContent = successModal.querySelector('div');
		if (successModal && modalContent) {
			successModal.classList.remove('hidden');
			successModal.classList.add('flex');
			setTimeout(() => {
				successModal.classList.remove('opacity-0');
				modalContent.classList.remove('scale-95', 'opacity-0');
				modalContent.classList.add('scale-100', 'opacity-100');
			}, 10);
		}
	}

	function showErrorModal() {
		const errorModal = document.getElementById('errorModal');
		const modalContent = errorModal.querySelector('div');
		if (errorModal && modalContent) {
			errorModal.classList.remove('hidden');
			errorModal.classList.add('flex');
			setTimeout(() => {
				errorModal.classList.remove('opacity-0');
				modalContent.classList.remove('scale-95', 'opacity-0');
				modalContent.classList.add('scale-100', 'opacity-100');
			}, 10);
		}
	}

	function hideModal(modalId) {
		const modal = document.getElementById(modalId);
		const modalContent = modal.querySelector('div');
		if (modal && modalContent) {
			modalContent.classList.remove('scale-100', 'opacity-100');
			modalContent.classList.add('scale-95', 'opacity-0');
			setTimeout(() => {
				modal.classList.remove('flex');
				modal.classList.add('hidden');
			}, 300);
		}
	}

	async function handleSubmit(e) {
		e.preventDefault();
		console.log('Form submission triggered');
		
		const username = document.getElementById('username').value;
		const password = document.getElementById('password').value;

		console.log('Username:', username);
		console.log('Password:', password);

		const body = JSON.stringify({ username, password });
		console.log('POST body:', body);  // Log the body of the POST call

		try {
			const response = await fetch('https://dev.complete.com.sg/otto/receiver/Authentication.fmp12/web?apiKey=dk_OyB2ZYI2oHvffZXuI7E4gAC7Jkf9IItg', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: body,
			});
			

			console.log('Response status:', response.status);

			const responseData = await response.json();
			console.log('Full response data:', responseData);

			if (responseData.success && responseData.scriptResult) {
				const scriptResult = responseData.scriptResult;
				console.log('Script result:', scriptResult);

				if (scriptResult.status === "200") {
					console.log('Login successful');
					
					if (scriptResult.token && scriptResult.data) {
						sessionStorage.setItem('authToken', scriptResult.token);
						console.log('Token saved to session storage');
						
						// Save scriptResult.data as userProfile
						const userProfile = JSON.parse(scriptResult.data);
						sessionStorage.setItem('userProfile', JSON.stringify(userProfile));
						console.log('User profile saved to session storage:', userProfile);

						// Show success modal
						showSuccessModal();

						// Navigate to profile page after a short delay
						setTimeout(() => {
							window.location.href = '/profile';
						}, 1500); // Delay of 1.5 seconds
					} else {
						console.error('Token or data not found in the response');
						showErrorModal();
					}
				} else {
					console.error('Login failed:', scriptResult.status);
					showErrorModal();
				}
			} else {
				console.error('Unexpected response structure:', responseData);
				showErrorModal();
			}
		} catch (error) {
			console.error('Error during login:', error);
			showErrorModal();
		}
	}
</script>
